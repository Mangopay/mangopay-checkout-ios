"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

directive @batchall(name: String!, batchArg: String!) on FIELD_DEFINITION

"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

type PaymentReceipt {
  type: String
  message: String
  date: DateTime
  receiptUrl: String
}

input IntentCustomerInput {
  id: String
  email: String
  name: String
  isGuest: Boolean
}

type Query {
  getPayment(id: ID!): Payment
  getIntent(id: ID!): IntentApi!
  listPayments(startDate: DateTime, endDate: DateTime, status: [PaymentStatus], first: Int, last: Int, after: String, before: String, minAmount: Int, maxAmount: Int, data: PaymentFilterInput): PaymentsWithFilter
  getPaymentMethod(token: String!): PaymentMethod!
  getPaymentMethods(customerId: String!): [PaymentMethod]
  getCustomer(id: String!): Customer!
  listCustomerCards(vaultCustomerId: String!): [PaymentMethod]
  primedQuery: Boolean!
  initializeSDK: Boolean!
  optimise(intentId: String!): [PaymentMethodEnum!]
}

type Customer {
  id: String
  billingAddress: BillingAddressApi
  description: String
  email: String
  name: String
  phone: String
  shippingAddress: ShippingAddressApi
  company: CompanyApi
  systemCreated: DateTime
  systemUpdated: DateTime
  defaultPaymentMethod: String
}

input AddressInput {
  addressLine1: String
  addressLine2: String
  postTown: String
  country: String
  postCode: String
}

interface Node {
  id: ID!
}

enum Projection {
  MIN
  MAX
  SUM
  AVG
  COUNT
  LAST_RECORD
  MOST_COMMON
}

input OverseasAccountIdentifierInput {
  bban: String
  upic: String
  iban: String
  otherAccountNumber: String
}

"""An RFC-3339 compliant DateTime Scalar"""
scalar DateTime

type PayoutDetails {
  description: String
}

type PaymentInternal implements Node {
  id: ID!
  teamId: ID
  flowId: String
  orderId: String
  sourceId: String
  connectionId: String
  date(tz: String! = "Z"): DateTime!
  status: PaymentStatus
  amount: Amount
  refundedAmount: Amount
  currency: String
  country: String
  eci: String
  paymentProcessingOrigin: String
  threeDSecureVersion: String
  threeDSecureAuthenticationResult: String
  paymentGateway: PaymentGatewayInternal
  paymentCore: PaymentCore
  paymentDetails: PaymentDetails
  paymentTimeline: PaymentTimelineInternal
  paymentConnections: PaymentConnections
  paymentCustomer: PaymentCustomer
  metadata: JSON
  paymentMethodDetails: PaymentMethodDetails
  paymentReceipt: PaymentReceipt
  fraud: PaymentFraud
  attachments: [Attachment]
  flowInstanceId: String
}

input PaymentSortDataInput {
  fieldName: String
  order: SortVerb
}

enum SortVerb {
  ASC
  DESC
}

type IntentDelivery {
  status: FormStepStatus
}

type PaymentCustomer {
  id: String
  email: String
  name: String
  phone: String
}

input DestinationInput {
  id: String
  emailAddress: String
  address: AddressInput
  birthdate: String
  phoneNumber: String
  countrySpecificDetails: CountrySpecificDetailsInput
  iban: String
  name: String
  type: String
  accountNumber: String
  sortCode: String
  bic: String
}

type PaymentProcessorToken {
  token: String
}

input VaultCustomerInput {
  id: String
  billingAddress: BillingAddressInput
  description: String
  email: String
  name: String
  phone: String
  shippingAddress: ShippingAddressInput
  company: CompanyInput
}

input CardDtoInput {
  number: String
  expMonth: Int!
  expYear: Int!
  cvc: String
  name: String
  address: AddressDtoInput
}

input IntentCartItem {
  id: String
  quantity: Int
  title: String
  variantTitle: String
  weight: Int
  taxable: Boolean
  requiresShipping: Boolean
  price: Long
  sku: String!
  lineTotal: Long
  image: String
  discountedPrice: Long
  totalDiscount: Long
}

input UltimatePayerInput {
  name: String
  bic: String
  birthDetails: BirthDetailsInput
  officialIdentification: OfficialIdentificationInput
  address: AddressInput
  officialIdDetailOrgs: OfficialIdDetailOrgInput
  overseasAccountIdentifier: OverseasAccountIdentifierInput
}

type FlowSummary {
  name: String
  date: DateTime
  flowId: String
  flowInstanceId: String
}

type CheckoutPaymentGateway {
  id: String!
  name: String!
  type: CheckoutType!
  url: String
  logoUrl: String!
}

enum CardFundingType {
  CREDIT
  DEBIT
  PREPAID
  UNKNOWN
}

type DisputeEvidenceSubmissionResponse {
  processorErrorMessage: String
  processorResponseJson: String
  newDisputeStatus: String
}

input CreatePayoutInput {
  reference: String
  externalReference: String
  sourceAccountId: String!
  endToEndReference: String
  currency: String
  paymentDate: String
  amount: String
  overseasPaymentDetail: OverseasPaymentDetailInput
  regulatoryReporting: RegulatoryReportingInput
  destination: DestinationInput
}

input IntentAmountInput {
  amount: Int
  currency: String
}

enum DisputeReasonEnum {
  FRAUD
  AUTHORIZATION
  PROCESSING_ERRORS
  CUSTOMER_DISPUTES
  UNCATEGORISED
}

input PaymentMethodInput {
  card: PaymentCardInput
  bankAccount: PaymentBankAccountInput
}

type SettlementReport {
  id: ID
  settlementBatchId: String
  teamId: ID
  sourceId: String
  merchantReference: String
  paymentMethod: PaymentMethodEnum
  type: String
  grossCurrency: String
  grossDebit: Long
  grossCredit: Long
  exchangeRate: Long
  netCurrency: String
  netDebit: Long
  netCredit: Long
  commission: Long
  markup: Long
  schemeFees: Long
  interchange: Long
  totalFees: Long
}

input OfficialIdentificationInput {
  passportNumber: String
  socialSecurityNumber: String
  otherIdNumber: String
  customerNumber: String
  drivingLicenceNumber: String
}

type PaymentCore {
  processorStatus: String
  paymentMethod: PaymentMethodEnum
  outcome: PaymentOutcome
}

input MbwayInput {
  phoneNumber: String!
}

input ChargeDetailsInput {
  amount: String
  bearer: String
  currency: String
}

type CompanyApi {
  name: String
  number: String
  taxId: String
  vatId: String
}

enum CheckoutType {
  HOSTED
  TOKENISATION
}

"""An object scalar"""
scalar Object

input IntentShippingInput {
  status: FormStepStatus
}

type FlowSummaryInternal {
  id: String
  name: String
  date: DateTime
  flowId: String
  flowInstanceId: String
}

input AddressDtoInput {
  line1: String
  line2: String
  city: String
  postalCode: String
  state: String
  country: String
}

input StructuredRegulatoryReportingInput {
  amount: String
  code: String
  information: String
  currencyCode: String
}

type DisputeEvidenceForm {
  form: JSON
}

type PaymentGatewayInternal {
  id: String
  name: String
  logo: String
}

type PaymentTimelineInternal {
  overview: [PaymentTimelineEvent]
  flows: [FlowSummaryInternal]
}

input BirthDetailsInput {
  countryOfBirth: String
  cityOfBirth: String
}

input PaymentFilterDataInput {
  date: FilterDataInput
  dateRange: FilterDataInput
  currency: FilterDataInput
  amount: FilterDataInput
  type: FilterDataInput
  method: FilterDataInput
  status: FilterDataInput
  intentStatus: FilterDataInput
  gateway: FilterDataInput
  country: FilterDataInput
  flowId: FilterDataInput
  category: FilterDataInput
}

input RegulatoryAuthorityInput {
  authorityName: String
  authorityCountry: String
}

type SecureCardInfo {
  id: ID!
  nickname: String
  maskedNumber: String!
  cardholderName: String
  number: CreditCardNumber!
  expMonth: String!
  expYear: String!
  securityCode: String
  address: PhysicalAddress
  cardFundingType: CardFundingType!
  cardType: CardType!
}

type PaymentTimeline {
  overview: [PaymentTimelineEvent]
  flows: [FlowSummary]
}

input FieldDefinitionInput {
  key: String
  type: DataType
  label: String
  isEditable: Boolean
  value: Object
  isCondition: Boolean
  describedBy: DataType
  isFilterable: Boolean
  canProvideUniqueRecord: Boolean
  description: String
  valueExample: String
}

enum PaymentMethodCardType {
  CREDIT
  DEBIT
  PREPAID
  UNDEFINED
}

input PaymentBankAccountInput {
  number: String
  accountHolderName: String
  bankName: String
  cardType: PaymentMethodCardType
  product: String
}

type PaymentEdge {
  node: PaymentInternal
  cursor: String!
}

type PaymentsWithFilter {
  data: PaymentFilter
  pageInfo: PageInfo!
  edges: [PaymentEdge]
}

input PaginationInput {
  page: Long
  max: Long
  orderBy: String
  asc: Boolean
}

type DisputeEvidenceFileFormat {
  contentType: String
  maxFileSizeMB: Int
}

input IntentLocationInput {
  country: String
}

enum DataType {
  ADDRESS
  AMOUNT
  ARRAY
  BOOLEAN
  CONNECTION_ID
  CONNECTION_ID_COMMUNICATION
  CONNECTION_ID_CRM
  CONNECTION_ID_OUTBOUND_EMAIL
  CONNECTION_ID_PAYMENT_DISPUTE
  CONNECTION_ID_PAYMENT_GATEWAY
  CONNECTION_ID_UI
  CORE_CARD
  CORE_CART
  CORE_CART_ITEM
  CORE_CART_ITEM_LIST
  CORE_CUSTOMER
  CORE_FLOW_INSTANCE
  CORE_INTENT
  CORE_LOCATION
  CORE_PAYMENT
  CORE_PAYMENT_SCORE
  CORE_PAYMENT_ISSUE
  CORE_DISPUTE
  DATE
  EMAIL
  EMAIL_LIST
  EMAIL_MESSAGE
  ENUM
  ENUM_CARD_BRAND
  ENUM_CARD_PRODUCT
  ENUM_CARD_CATEGORY
  ENUM_CARD_TYPE
  ENUM_COUNTRY
  ENUM_CURRENCY
  ENUM_DECLINE_CODE
  ENUM_DECLINE_TYPE
  ENUM_FLOW_TYPE
  ENUM_PAYMENT_METHOD
  ENUM_PAYMENT_TYPE
  ENUM_PAYMENT_STATUS
  ENUM_DISPUTE_STATUS
  ENUM_DISPUTE_REASON
  ENUM_DISPUTE_LIFECYCLE_STAGE
  ENUM_PAYMENT_PROCESSING_ORIGIN
  FILE
  FLOAT
  ID
  LONG_STRING
  LONG
  LOOKUP
  OBJECT
  OBJECT_LIST
  PAYMENT_METHOD_LIST
  PAYMENT_METADATA_STRUCTURE
  STRING
  STRING_LIST
  THREEDS_CONFIG
  TIMEFRAME
  UNKNOWN
  URL
  USER_ACTION
  USER_OR_GROUP_LIST
  USER_OR_GROUP
  USER
  UUID
  FLOW_ID_LIST
}

type FilterData {
  value: JSON
  config: JSON
  verbs: [String]
  selectedVerb: String
}

"""A scalar for credit card numbers."""
scalar CreditCardNumber

type PaymentConnections {
  latestCharge: DateTime
  invoice: String
  payout: String
}

input PaymentCardBillingAddressInput {
  line1: String
  line2: String
  city: String
  postalCode: String
  state: String
  country: String
}

type IntentShipping {
  status: FormStepStatus
}

enum FormStepStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETE
  FAILED
}

input OfficialIdDetailOrgInput {
  certificateOfIncorporationNumber: String
  employerIdNumber: String
  siretCode: String
  dataUniversalNumberingSystem: String
  taxIdNumber: String
  eanglnIdentifier: String
  beiIdentifier: String
  customerNumber: String
  countryIdCode: String
  genericIdentificationIssr: String
  gs1glnIdentifier: String
  sirenCode: String
  bicIdentifier: String
  chipsUniversalIdentifier: String
  centralBankIdNumber: String
  bankPartyIdentification: String
  clearingIdNumber: String
  genericIdentification3: String
}

type Amount {
  rawAmount: Int!
  currency: String
  formattedAmount: String!
}

type DisputeEvidenceFilesConfig {
  fileTypes: [DisputeEvidenceFileType]
  fileFormats: [DisputeEvidenceFileFormat]
}

type Intent {
  id: ID!
  date: DateTime!
  paymentFlowId: String!
  trackingId: String!
  currency: String
  amount: Amount
  status: IntentStatus
  statusDate: DateTime
  location: IntentLocation
  customer: IntentCustomer
  paymentAttempts: [IntentPaymentAttempt]
  timeline: IntentTimeline
  linkedPayments: [LinkedPayment]
  cart: IntentCart
}

type IntentCustomer {
  id: String
  isGuest: Boolean
  email: String
  name: String
}

type PayoutSchemaInfo {
  name: String
  id: String
  message: String
  responseCode: String
}

input HeadlessThreeDSecureDtoInput {
  redirectUrl: String!
  perform3DSecure: Boolean!
}

type PaymentDispute {
  id: ID
  reason: DisputeReasonEnum
  processorReason: String
  status: DisputeStatusEnum
  lifecycleStage: DisputeLifecycleStageEnum
  processorStatus: String
  disputeDate: DateTime
  responseDate: DateTime
  amount: Amount
  processor: String
  rawDispute: JSON
  sourceId: String
  sourceDisputeId: String
  paymentId: String
  connectionId: String
  teamId: ID
  customerId: ID
  disputeTimeline: DisputeTimeline
}

enum DisputeStatusEnum {
  WON
  LOST
  REFUNDED
  NEEDS_RESPONSE
  SENT_FOR_REVIEW
  UNDER_REVIEW
  CLOSED
  NOTIFICATION
}

type IntentLocation {
  country: String
}

type LinkedPaymentGateway {
  id: String
  name: String
  token: String
  created: DateTime
  updated: DateTime
  reusable: Boolean
}

input IntentDeliveryInput {
  status: FormStepStatus
}

type PaymentOutcome {
  networkStatus: String
  reason: String
  riskLevel: String
  riskScore: Long
  type: PaymentType
  declineCode: String
  declineType: String
  processorDeclineCode: String
  processorDeclineType: String
}

input BillingAddressInput {
  line1: String
  line2: String
  city: String
  postalCode: String
  state: String
  country: String
}

type ExampleData {
  fromConnectionId: String
  ofType: DataType
  description: String!
  asInput: JSON!
  described: [FieldDefinition!]
}

type IntentPaymentAttempt {
  status: FormStepStatus
}

enum CheckoutPaymentStatus {
  SUCCEEDED
  DECLINED
}

input ThreeDSecureDtoInput {
  redirectUrl: String
}

type FieldDefinition {
  key: String
  type: DataType
  label: String
  isEditable: Boolean
  value: Object
  isCondition: Boolean
  describedBy: DataType
  isFilterable: Boolean
  canProvideUniqueRecord: Boolean
  description: String
  valueExample: String
}

type Attachment {
  id: ID!
  fileName: String
  objectKey: String
  contentType: String
  accessUrl: String
}

type IntentApi {
  id: ID!
  date: DateTime!
  paymentFlowId: String!
  trackingId: String!
  currency: String
  amount: Amount
  status: IntentStatus
  statusDate: DateTime
  location: IntentLocation
  customer: IntentCustomer
  timeline: IntentTimeline
  linkedPayments: [LinkedPayment]
  cart: IntentCart
}

input HeadlessPaymentProcessorTokenRequest {
  vaultToken: String!
  paymentProcessorConnectionId: String!
  currencyCode: String!
  threeDSecureRedirectUrl: String
}

type LinkedPayment {
  paymentId: String
  status: PaymentStatus
  time: DateTime
  title: String
}

type NetworkToken {
  token: String
}

enum CheckoutPaymentMethod {
  CARD
  PAYPAL
  KLARNA
  IDEAL
  SEPA_CREDIT_TRANSFER
  APPLE_PAY
}

type CardToken {
  id: String!
  token: String!
  createdDate: DateTime!
  customer: Customer
  card: PaymentMethod
}

type IntentCart {
  id: String!
  weight: Int!
  itemCount: Int!
  items: [IntentCartItemType!]
}

type PaymentFilterData {
  date: FilterData
  dateRange: FilterData
  currency: FilterData
  amount: FilterData
  type: FilterData
  method: FilterData
  status: FilterData
  intentStatus: FilterData
  gateway: FilterData
  country: FilterData
}

type DisputeTimelineEvent {
  title: String
  time: DateTime
  message: String
}

enum PaymentStatus {
  ACTIVE
  INACTIVE
  AUTHORISED
  SUCCEEDED
  REFUNDED
  PARTIAL_REFUNDED
  CANCELLED
  FAILED
  DECLINED
  DISPUTED
  REMOVED
  NEEDS_3D_SECURE
  NEEDS_APM_AUTHORIZATION
  GATEWAY_HOLD
  REFUND_PENDING
}

input CompanyInput {
  name: String
  number: String
  taxId: String
  vatId: String
}

type IntentTimelineStep {
  status: FormStepStatus
  date: DateTime
}

type CheckoutPaymentMethods {
  paymentMethods: [CheckoutPaymentMethod!]
  paymentGateways: [CheckoutPaymentGateway!]
}

type CardInfo {
  id: ID!
  nickname: String
  cardholderName: String
  maskedNumber: String!
  expMonth: String!
  expYear: String!
  address: PhysicalAddress
  cardFundingType: CardFundingType!
  cardType: CardType!
}

type PhysicalAddress {
  line1: String
  line2: String
  line3: String
  line4: String
  locality: String
  region: String
  country: String
  postcode: String
}

input CountrySpecificDetailsInput {
  bankCode: String
  chineseId: String
  bankBranchCode: String
  province: String
  business: String
  bankBranchName: String
  bankName: String
  bankAddress: String
  bankCity: String
}

input PaymentFilterInput {
  id: ID
  teamId: ID
  customerId: ID
  userId: ID
  name: String
  filter: PaymentFilterDataInput
  sort: [PaymentSortDataInput]
}

input AuthorisedPaymentInput {
  transactionId: String
  orderId: String
  flowId: String
  intentId: String
  currencyCode: String
  amount: Long
  paymentMethod: PaymentMethodDtoInput!
  customer: PaymentMethodCustomerDtoInput
  description: String
  statementDescriptor: String
  metadata: JSON
  perform3DSecure: ThreeDSecureDtoInput
  apmRedirectUrl: String
  fraud: JSON
  headlessMode: Boolean
  paymentProcessorConnectionId: String
}

input HeadlessNetworkTokenRequest {
  vaultToken: String!
}

input PaymentViewInput {
  name: String
  visibleFields: JSON
  hiddenFields: JSON
  sharedWith: JSON
  tableState: JSON
  sort: [PaymentSortDataInput]
  filter: PaymentFilterDataInput
}

type DisputeTimeline {
  events: [DisputeTimelineEvent]
}

type Payment implements Node {
  id: ID!
  sourceId: String
  date(tz: String! = "Z"): DateTime!
  status: PaymentStatus
  type: PaymentType
  amount: Amount
  refundedAmount: Amount
  currency: String
  country: String
  flowId: String
  flowInstanceId: String
  paymentGateway: PaymentGateway
  paymentCore: PaymentCore
  paymentDetails: PaymentDetails
  paymentTimeline: PaymentTimeline
  paymentCustomer: PaymentCustomer
  metadata: JSON
  paymentMethodDetails: PaymentMethodDetails
  attachments: [Attachment]
}

enum IntentStatus {
  ACTIVE
  INACTIVE
  COMPLETE
}

input FilterDataInput {
  value: JSON
  selectedVerb: String
}

input RegulatoryReportingInput {
  type: String
  structuredRegulatoryReporting: StructuredRegulatoryReportingInput
  regulatoryAuthority: RegulatoryAuthorityInput
}

type PaymentSortData {
  fieldName: String
  order: SortVerb
}

type PayoutPayment {
  id: String
  status: String
  createdDate: DateTime
  externalReference: String
  approvalStatus: String
  message: String
  details: PayoutDetails
  schemeInfo: PayoutSchemaInfo
}

input PaymentMethodCustomerDtoInput {
  id: String
  email: String
  name: String
}

"""Long type"""
scalar Long

type PaymentMethod {
  id: String
  token: String
  number: String!
  expMonth: Int!
  expYear: Int!
  name: String
  type: String
  product: String
  bankName: String
  country: String
  brand: String
  category: String
  bin: String
  metadata: JSON
  externalId: String
  fingerprint: String
  isDefault: Boolean
  systemCreated: DateTime
  systemUpdated: DateTime
  linkedPaymentGateways: [LinkedPaymentGateway!]!
  vaultCustomerId: String
  billingAddress: BillingAddressApi
}

type PaymentDetails {
  statementDescriptor: String
  localCurrency: String
  localAmount: Amount
  exchangeRate: String
  fee: Amount
  tax: Amount
  processingFee: Amount
  net: Amount
  description: String
}

type Mutation {
  createPayout(connectionSmartId: String!, createPayoutInput: CreatePayoutInput!): PayoutPayment
  authorizePayment(authorisePayment: AuthorisedPaymentInput!): Payment
  headlessAuthorizePayment(headlessAuthorisePayment: HeadlessAuthorisedPaymentInput!): Payment
  capturePayment(id: ID!, amount: Long, metadata: JSON): Payment
  refundPayment(id: ID!, amount: Long, reason: String): Payment
  cancelPayment(id: ID!, reason: String): Payment
  startIntent(trackingId: ID!, paymentFlowId: ID!, customer: IntentCustomerInput, amount: IntentAmountInput!, location: IntentLocationInput, cart: IntentCartInput): IntentApi!
  updateIntent(id: ID!, trackingId: String, customer: IntentCustomerInput, amount: IntentAmountInput, billing: IntentShippingInput, shipping: IntentShippingInput, delivery: IntentDeliveryInput, location: IntentLocationInput, cart: IntentCartInput): IntentApi!
  completeIntent(id: ID!, paymentReference: ID!): IntentApi!
  setupWallet(walletType: String!, payload: JSON!): JSON!
  generateClientToken(amount: Long, currency: String): ClientToken!
  createCustomer(data: CustomerInput!): String!
  updateCustomer(id: ID!, customer: VaultCustomerInput!): Boolean
  tokenisePaymentMethod(data: TokenInput!): CardToken!
  updateDefaultPaymentMethod(token: String!): Boolean
  deletePaymentMethod(token: String!): Boolean
  headlessRequestPaymentProcessorToken(tokenRequest: HeadlessPaymentProcessorTokenRequest!): PaymentProcessorToken
  headlessRequestNetworkToken(tokenRequest: HeadlessNetworkTokenRequest!): NetworkToken
  tokeniseCard(data: TokenInput!): CardToken!
}

input PaymentMethodDtoInput {
  type: String!
  token: String
  walletToken: String
  card: CardDtoInput
  googlePay: GooglePayInput
  ideal: IdealInput
  mbway: MbwayInput
}

type ClientToken {
  token: String!
  ttl: Long!
}

enum DisputeLifecycleStageEnum {
  INQUIRY
  CHARGEBACK
  PRE_ARBITRATION
  ARBITRATION
}

type PaymentMethodDetails {
  id: String
  number: String
  expires: String
  fingerprint: String
  paymentMethod: PaymentMethodEnum
  type: PaymentMethodCardType
  product: String
  issuingBank: String
  category: String
  country: String
  brand: String
  name: String
}

input SettlementReportInput {
  id: ID
  settlementBatchId: String
  sourceId: String
  merchantReference: String
  paymentMethod: PaymentMethodEnum
  type: String
  grossCurrency: String
  grossDebit: Long
  grossCredit: Long
  exchangeRate: Long
  netCurrency: String
  netDebit: Long
  netCredit: Long
  commission: Long
  markup: Long
  schemeFees: Long
  interchange: Long
  totalFees: Long
}

enum ComparisonOperator {
  EQUALS
  NOT_EQUALS
  LESS_THAN
  LESS_THAN_EQUALS
  GREATER_THAN
  GREATER_THAN_EQUALS
  CONTAINS
  IS_EMPTY
  NOT_EMPTY
  BETWEEN_INCLUSIVE
  BETWEEN_EXCLUSIVE
  IN_LIST
  ALL
  OTHER
}

input PaymentCardInput {
  number: String!
  expMonth: Int!
  expYear: Int!
  cvc: String
  name: String
  billingAddress: BillingAddressInput
  isDefault: Boolean
}

input StorePaymentDisputeInput {
  smartConnectionId: String!
  teamId: ID!
  customerId: ID!
  reason: DisputeReasonEnum!
  status: DisputeStatusEnum!
  lifecycleStage: DisputeLifecycleStageEnum!
  amountInMinor: Long!
  currency: String!
  sourceId: String!
  rawDispute: JSON!
  processorReason: String
  processorStatus: String
  disputeDate: DateTime
  responseDate: DateTime
  sourceDisputeId: String
  evidence: JSON
}

input OverseasPaymentDetailInput {
  additionalRemittanceInformation: String
  originalPaymentDetails: OriginalPaymentDetailsInput
  chargeDetails: ChargeDetailsInput
  ultimatePayer: UltimatePayerInput
}

"""A JSON scalar"""
scalar JSON

input CustomerInput {
  card: PaymentCardInput
  customer: VaultCustomerInput!
}

enum PaymentMethodEnum {
  CASH
  CARD
  MASTERCARD
  VISA
  AMEX
  MAESTRO
  DANKORT
  PAYPAL
  ACCOUNT
  ACH
  ACH_CREDIT
  ACH_DEBIT
  SEPA_CREDIT_TRANSFER
  SEPA_DIRECT_DEBIT
  IDEAL
  DIRECT_DEBIT
  BAN_CONTACT
  BACS
  BECS
  GIRO_PAY
  SOFORT
  WALLET
  APPLE_PAY
  GOOGLE_PAY
  SAMSUNG_PAY
  ALI_PAY
  WE_CHAT
  BUY_NOW_PAY_LATER
  KLARNA
  AFFIRM
  AFTER_PAY
  CLEAR_PAY
  CRYPTO
  BITCOIN
  AIIA
  FINICITY_ACH
  OPENBANKING
  PLAID
  VOLT
  MBWAY
  MULTIBANCO
}

input HeadlessAuthorisedPaymentInput {
  transactionId: String
  orderId: String
  intentId: String
  currencyCode: String
  amount: Long
  paymentMethod: PaymentMethodDtoInput!
  customer: PaymentMethodCustomerDtoInput
  description: String
  statementDescriptor: String
  metadata: JSON
  performHeadless3DSecure: HeadlessThreeDSecureDtoInput
  apmRedirectUrl: String
  paymentProcessorConnectionId: String
  fraud: JSON
}

input TokenInput {
  paymentMethod: PaymentMethodInput!
  metadata: JSON
  externalId: String
  customer: VaultCustomerInput
}

type PaymentFraud {
  fraudProvider: String
  score: String
  date(tz: String! = "Z"): DateTime
}

type IntercomPaymentStatistic {
  paymentsCount: Long
}

type PaymentGateway {
  name: String
  logo: String
}

input IdealInput {
  bank: String!
}

enum CardType {
  MASTERCARD
  VISA
  AMEX
  DINERS
  DISCOVER
  JCB
  UNIONPAY
  UNKNOWN
}

enum PaymentType {
  PAYMENT
  PAYOUT
  TRANSFER
}

type BillingAddressApi {
  line1: String
  line2: String
  city: String
  postalCode: String
  state: String
  country: String
}

input ShippingAddressInput {
  address: BillingAddressInput
  name: String
  phone: String
}

type IntentCartItemType {
  id: String
  quantity: Int!
  title: String!
  variantTitle: String
  weight: Int!
  taxable: Boolean!
  requiresShipping: Boolean!
  price: Long!
  sku: String!
  lineTotal: Long!
  image: String!
  discountedPrice: Long!
  totalDiscount: Long!
}

input GooglePayInput {
  transactionId: String!
}

type PaymentFilter {
  id: ID
  teamId: ID
  customerId: ID
  userId: ID
  name: String
  filter: PaymentFilterData
  sort: [PaymentSortData]
}

input OriginalPaymentDetailsInput {
  exchangeRate: String
  amount: String
  currency: String
}

type PaymentTimelineEvent {
  title: String
  time: DateTime
  message: String
}

input IntentCartInput {
  id: String
  weight: Int
  itemCount: Int
  items: [IntentCartItem!]
}

input PaymentAttemptInput {
  status: FormStepStatus
  outcome: String
  paymentMethod: String
  sca: Boolean
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
  totalSize: Long
}

type ShippingAddressApi {
  address: BillingAddressApi
  name: String
  phone: String
}

type IntentTimeline {
  intentStarted: IntentTimelineStep
  shipping: IntentTimelineStep
  delivery: IntentTimelineStep
  billing: IntentTimelineStep
  paymentAttempts: [IntentTimelineStep]
  completeIntent: IntentTimelineStep
}

type DisputeEvidenceFileType {
  fileTypeName: String
  fileTypeCode: String
  fileTypeCategory: String
  required: Boolean
  tooltip: String
}