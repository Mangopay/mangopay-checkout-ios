#import <Foundation/Foundation.h>
#import <UIKit/UITextField.h>
#import "NTHTextFieldRegisterMode.h"

NS_ASSUME_NONNULL_BEGIN

/**
 NTHAttemptConfiguration class is configuration class. Object of this class,
 with proper configuration should be pass with beginAttempt.
 */
@interface NTHAttemptConfiguration: NSObject 


/**
 This boolean value is responsible for setting the sending behavioral data feature.
 Default is false/NO (swift/objc). It means that the data will be sent.
 */
@property BOOL withoutBehavioralData;


/**
 This boolean value is responsible for setting the mode of data collection only
 from previously registered text fields.
 The default is false/NO (swift/objc). It means that data will be sent from ALL text fields,
 not just registered ones.
 */
@property BOOL registeredTextFieldsOnly;


/**
 In sensitiveFields argument you should set an
 array of strings containing Accessibility Labels of UITextFields
 that could contain sensitive text, for example Password or Card Number
 */
@property NSArray<NSString *> * _Nullable sensitiveFields;
@end


/**
 NTHCustomDataOptions enum is used to specify type of data passed
 to sendCustomAttemptData method
 */
typedef NS_ENUM(NSUInteger, NTHCustomDataOptions) {
	/**
	 Indicates that the given dictionary is convertible to JSON data
	 */
	DataTypeJson,
};


@interface NTHNethone : NSObject


/**
 Merchant number is an ID number provided to you during the integration process.
 NethoneSDK has to be notified about that number before executing any actions,
 so it is required to call this function shortly after application start,
 for example in didFinishLaunchingWithOptions.
 
 This should not be changed while using the app as it may cause data inconsistency
 
 @param merchantNumber Unique merchant number for merchant
 */
+ (void)setMerchantNumber:(NSString *)merchantNumber;


/**
 The attemptReference is a unique, single-use attempt identifier.
 It will be used to identify this specific payment or significant action attempt.
 Your server should later use this exact attempt reference to query Nethone about this attempt status.
 
 AttemptReference is generated by calling beginAttempt function and is accessible by this function.
 The SDK stores the last attempt reference after finalizing or canceling until a new attempt is started,
 then it will be override by new one.
 */
+ (NSString * _Nullable)attemptReference;


/**
 An attempt is considered to be a process during which user stays on a significant path.
 There is only one attempt possible at a time.
 All started attempts should be finished or canceled before starting a new one.
 
 Calling beginAttempt during previous attempt will result in an error.
 
 @param configuration In configuration argument you should pass an NTHAttemptConfiguration
 class object, with proper configuration.
 
 */
+ (BOOL)beginAttemptWithConfiguration:(NTHAttemptConfiguration * _Nullable)configuration 
								error:(NSError **)error;


/**
 This method will finalize attempt.
 It will also force synchronization of all collected data.
 
 Only one attempt at a time is allowed
 
 When you call finalizeAttempt on already finalized attempt, then you get an error.
 
 @param completion Block called after finalization and data synchronization is completed
 */
+ (BOOL)finalizeAttemptWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion 
								error:(NSError **)error;


/**
 Method used to cancel the previously began attempt
 This method will stop data collection, but not synchronize it
 
 Only one attempt at a time is allowed
 
 When you call cancel on already completed attempt, then you get an error.
 */
+ (BOOL)cancelAttemptWithError:(NSError **)error;

/**
 Method used to send custom data for current attempt
 
 @param data Data to be sent
 
 @param options In options argument you should specify type of data passed in data argument.
 Passing data which type does not match the one provided in the argument will result in an error.

 When you call sendCustomAttemptData on a not started or already completed attempt, then you get an error.

 */
+ (BOOL)sendCustomAttemptData:(NSDictionary<NSString *, id> *)data
					  options:(NTHCustomDataOptions)options
						error:(NSError **)error;


/**
 This method will register a text field to send data from it.

 @param mode Indicates the mode in which textField will collect data. For possible values,
 see NTHRegisterMode enum.

 @param name Describes the given textField in collected data.

 To collect data only from previously registered textFields set configuration option - `registeredTextFieldsOnly`
 to true/YES (swift/objc).
 Otherwise, data will be collected from all textFields encountered during profiling.

 A weak pointer is kept to the registered object.

 The fields are permanently registered, which means that data from these fields
 will be collected during each profiling. There is no need to register fields every time
 during the start of an attempt.

 Re-registering a textField object will retain the latest settings for that textField.
 */

+ (void)registerTextField:(UITextField *)textField
					 mode:(NTHRegisterMode)mode
					 name:(NSString * _Nullable)name;


+ (void)registerTextField:(UITextField *)textField __attribute__((deprecated("Use +registerTextField:mode:name: instead")));
- (instancetype) init __attribute__((unavailable("Use class methods only")));

@end

NS_ASSUME_NONNULL_END
